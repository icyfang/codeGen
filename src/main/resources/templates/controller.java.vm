package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;

#set($path=${cfg.domainName.substring(0, 1).toLowerCase()}+${cfg.domainName.substring(1)})
#if(!${package.ModuleName})
#set($module=${path})
#else
#set($module=${package.ModuleName})
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.example.codegenerator.basic.PageRequestVO;
import com.example.codegenerator.basic.PageResponseVO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.ResponseEntity;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}VO;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}AddParamVO;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}UpdateParamVO;
import ${package.Service}.${table.serviceName};

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;
/**
 * $!{cfg.domainName} Api Controller
 *
 * @author Hodur
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/public/api")
@Api("${cfg.domainName} Api")
@Validated
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

        #set($serviceName=${table.serviceName.substring(0, 1).toLowerCase()}+${table.serviceName.substring(1)})
        #set($path=${cfg.domainName.substring(0, 1).toLowerCase()}+${cfg.domainName.substring(1)})

     @Autowired
        private ${table.serviceName} ${serviceName};

        @ApiOperation(
                value = "Query ${cfg.domainName}",
                notes = "if there is a exception, throw it as BizException.",
                tags = "${cfg.domainName} Api"
        )
        @PostMapping(value = "/${path}/queryForm", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<PageResponseVO<${cfg.domainName}VO>> query${cfg.domainName}(@RequestBody
        PageRequestVO paramVO) {

            PageResponseVO<${cfg.domainName}VO> pageResponseVO = ${serviceName}.query${cfg.domainName}(paramVO);
                return ResponseEntity.ok(pageResponseVO);
        }

        @ApiOperation(value = "Get ${cfg.domainName} by id",
                notes = "if there is a exception, throw it as BizException.",
                tags = "${cfg.domainName} Api")
        @GetMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<${cfg.domainName}VO> get${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id) {
            ${cfg.domainName}VO ${path}VO = ${serviceName}.get${cfg.domainName}(id);
            return ResponseEntity.ok(${path}VO);
        }

        @ApiOperation(value = "Add ${cfg.domainName}",
                notes = "if there is a exception, throw it as BizException.",
                tags = "${cfg.domainName} Api")
        @PostMapping(value = "/${path}", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<${cfg.domainName}VO> add${cfg.domainName}(@ApiParam(required = true) @Valid @RequestBody
        ${cfg.domainName}AddParamVO paramVO) {
            ${cfg.domainName}VO ${path}VO = ${serviceName}.add${cfg.domainName}(paramVO);
            return ResponseEntity.ok(${path}VO);
        }

    @ApiOperation(value = "Update ${cfg.domainName}",
            notes = "if there is a exception, throw it as BizException.",
            tags = "${cfg.domainName} Api")
    @PatchMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${cfg.domainName}VO> update${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id,
                                               @ApiParam(required = true) @Valid @RequestBody ${cfg.domainName}UpdateParamVO paramVO) {
        ${cfg.domainName}VO ${path}VO = ${serviceName}.update${cfg.domainName}(id, paramVO);
        return ResponseEntity.ok(${path}VO);
    }

    @ApiOperation(value = "Delete ${cfg.domainName}",
            notes = "if there is a exception, throw it as BizException.",
            tags = "${cfg.domainName} Api")
    @DeleteMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> delete${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id) {
        Boolean aBoolean = ${serviceName}.delete${cfg.domainName}(id);
        return ResponseEntity.ok(aBoolean);
    }

}

#end
