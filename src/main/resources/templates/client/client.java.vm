package ${package.Mapper};

#set($path=${cfg.domainName.substring(0, 1).toLowerCase()}+${cfg.domainName.substring(1)})
#if(!${package.ModuleName})
#set($module=${path})
#else
#set($module=${package.ModuleName})
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.example.codegenerator.basic.PageRequestVO;
import com.example.codegenerator.basic.PageResponseVO;
import org.springframework.http.ResponseEntity;
import io.swagger.annotations.ApiParam;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}VO;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}AddParamVO;
import com.example.codegenerator.business.${package.ModuleName}.vo.${cfg.domainName}UpdateParamVO;

import javax.validation.Valid;
/**
 * $!{cfg.domainName} Rest Controller
 *
 * @author Hodur
 * @since ${date}
 */
// todo
// @FeignClient(name = "dependency-service")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public interface ${table.mapperName} {
#end

    #set($serviceName=${table.serviceName.substring(0, 1).toLowerCase()}+${table.serviceName.substring(1)})
    #set($path=${cfg.domainName.substring(0, 1).toLowerCase()}+${cfg.domainName.substring(1)})

    @PostMapping(value = "/${path}}/queryForm", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponseVO<${cfg.domainName}VO>> query${cfg.domainName}(@RequestBody PageRequestVO
    paramVO);

    @GetMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${cfg.domainName}VO> get${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id);

    @PostMapping(value = "/${path}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${cfg.domainName}VO> add${cfg.domainName}(@ApiParam(required = true) @Valid @RequestBody ${cfg.domainName}AddParamVO paramVO) ;

    @PatchMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${cfg.domainName}VO> update${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id,
                                               @ApiParam(required = true) @Valid @RequestBody ${cfg.domainName}UpdateParamVO
                                                paramVO) ;

    @DeleteMapping(value = "/${path}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> delete${cfg.domainName}(@ApiParam(required = true) @PathVariable("id") Integer id) ;

}

#end
